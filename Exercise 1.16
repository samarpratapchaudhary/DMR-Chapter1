/* Revise the main routine of the longest-line program so it will correctly print the length of arbitarily long input lines, and as much as possible of the text. */
#include <stdio.h>
#define MAXLINE 1000   /* maximum buffer size we can store */

int getlinex(char line[], int maxline);
void copy(char to[], char from[]);

int main() {
    int len;                // current line length
    int max;                // max length seen so far
    char line[MAXLINE];     // current input line (truncated if too long)
    char longest[MAXLINE];  // longest line saved (truncated if too long)

    max = 0;
    while ((len = getlinex(line, MAXLINE)) > 0) {
        if (len > max) {
            max = len;
            copy(longest, line);
        }
    }
    if (max > 0) {  // there was a line
        printf("Length: %d\n", max);
        printf("Text  : %s\n", longest);
    }
    return 0;
}

/* getlinex: read a line into s, return length
   - reads up to maxline-1 chars into buffer
   - continues counting if line is longer */
int getlinex(char s[], int lim) {
    int c, i;

    for (i = 0; (c = getchar()) != EOF && c != '\n'; ++i) {
        if (i < lim - 1) {   // store only within buffer
            s[i] = c;
        }
    }
    if (c == '\n') {
        if (i < lim - 1) {
            s[i] = c;
            ++i;
        }
    }
    s[(i < lim - 1) ? i : lim - 1] = '\0';
    return i;  // i may be bigger than lim-1 if line is long
}

/* copy: copy 'from' into 'to' */
void copy(char to[], char from[]) {
    int i = 0;
    while ((to[i] = from[i]) != '\0')
        ++i;
}
